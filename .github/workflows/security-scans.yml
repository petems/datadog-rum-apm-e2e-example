name: Security Scans

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    - cron: '0 6 * * 1' # Weekly scan on Mondays at 6 AM UTC
  workflow_dispatch: {}

jobs:
  # -----------------------------
  # CodeQL (JS/TS + Actions)
  # -----------------------------
  codeql:
    name: CodeQL (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript', 'actions' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        if: matrix.language != 'actions'
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # -----------------------------
  # Gitleaks (Secrets)
  # -----------------------------
  gitleaks:
    name: Secrets Scan (Gitleaks)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Gitleaks (container)
        run: |
          docker run --rm \
            -v "$PWD":/repo \
            -w /repo \
            zricethezav/gitleaks:latest \
            detect --source /repo --report-format sarif --report-path /repo/gitleaks.sarif --redact

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  # -----------------------------
  # NodeJSSCAN (SAST)
  # -----------------------------
  njsscan:
    name: SAST (nodejsscan)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run njsscan
        uses: ajinabraham/njsscan-action@v7
        with:
          args: "--sarif --output njsscan.sarif ."

      - name: Upload njsscan SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: njsscan.sarif

  # -----------------------------
  # Dockerfile Lint (Hadolint) + Image Scan (Trivy)
  # -----------------------------
  container-security:
    name: Container Security (Hadolint + Trivy)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: datablog:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'datablog:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          ignore-unfixed: true

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          failure-threshold: error

      - name: Upload Hadolint SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif

  # -----------------------------
  # Actionlint (GitHub Actions Lint)
  # -----------------------------
  actionlint:
    name: GitHub Actions Lint (actionlint)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run actionlint and output SARIF
        uses: rhysd/actionlint@v1.7.1
        continue-on-error: true
        with:
          args: -format sarif -out actionlint-results.sarif

      - name: Ensure SARIF file exists
        if: always()
        shell: bash
        run: |
          if [ ! -f actionlint-results.sarif ]; then
            printf '%s\n' \
              '{' \
              '  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",' \
              '  "version": "2.1.0",' \
              '  "runs": [' \
              '    {' \
              '      "tool": { "driver": { "name": "actionlint", "version": "v1.7.1" } },' \
              '      "results": []' \
              '    }' \
              '  ]' \
              '}' > actionlint-results.sarif
          fi

      - name: Upload actionlint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: actionlint-results.sarif
