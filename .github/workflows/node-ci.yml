name: Node.js CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  # Lint and Format Check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

      - name: Run ESLint (CI - no warnings)
        run: npm run lint:ci

      - name: Check Prettier formatting
        run: npm run format:check

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22, 24]
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

      - name: Run unit tests
        run: npm test
        env:
          MONGODB_URI: mongodb://localhost:27017/datablog-test
          NODE_ENV: test

      - name: Audit dependencies (prod, high+) [informational]
        run: npm run audit:ci
        continue-on-error: true

  # Docker Build and Security Scan
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: datablog:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'datablog:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          ignore-unfixed: true

      - name: Ensure SARIF file exists (trivy)
        if: always()
        shell: bash
        run: |
          if [ ! -f trivy-results.sarif ]; then
            printf '%s\n' \
              '{' \
              '  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",' \
              '  "version": "2.1.0",' \
              '  "runs": [' \
              '    {' \
              '      "tool": { "driver": { "name": "trivy" } },' \
              '      "results": []' \
              '    }' \
              '  ]' \
              '}' > trivy-results.sarif
          fi

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Summarize Trivy findings
        if: always()
        shell: bash
        run: |
          if command -v jq >/dev/null 2>&1; then
            COUNT=$(jq '[.runs[]?.results[]] | length' trivy-results.sarif 2>/dev/null || echo 0)
          else
            COUNT=unknown
          fi
          {
            echo "### Trivy Scan"
            echo "SARIF uploaded from: trivy-results.sarif"
            echo "Findings count: ${COUNT}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          failure-threshold: error

      - name: Ensure SARIF file exists (hadolint)
        if: always()
        shell: bash
        run: |
          if [ ! -f hadolint-results.sarif ]; then
            printf '%s\n' \
              '{' \
              '  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",' \
              '  "version": "2.1.0",' \
              '  "runs": [' \
              '    {' \
              '      "tool": { "driver": { "name": "hadolint" } },' \
              '      "results": []' \
              '    }' \
              '  ]' \
              '}' > hadolint-results.sarif
          fi

      - name: Upload Hadolint scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif

      - name: Summarize Hadolint findings
        if: always()
        shell: bash
        run: |
          if command -v jq >/dev/null 2>&1; then
            COUNT=$(jq '[.runs[]?.results[]] | length' hadolint-results.sarif 2>/dev/null || echo 0)
          else
            COUNT=unknown
          fi
          {
            echo "### Hadolint"
            echo "SARIF uploaded from: hadolint-results.sarif"
            echo "Findings count: ${COUNT}"
          } >> "$GITHUB_STEP_SUMMARY"

  # End-to-End Tests with Playwright
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install system dependencies for browsers
        run: npx playwright install-deps
      - name: Install Playwright browsers (if needed)
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install

      - name: Create minimal .env for Docker Compose
        run: |
          cat > .env <<'EOF'
          # Minimal placeholders for CI to satisfy docker-compose env_file
          DD_SITE=datadoghq.com
          DD_API_KEY=placeholder
          DD_APPLICATION_ID=placeholder
          DD_CLIENT_TOKEN=placeholder
          
          PORT=3000
          MONGODB_URI=mongodb://mongo:27017/datablog
          JWT_ACCESS_SECRET=change-me-secret
          JWT_REFRESH_SECRET=change-me-too
          ACCESS_TOKEN_TTL=15m
          REFRESH_TOKEN_TTL=7d
          NODE_ENV=test
          EOF

      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d mongo app

      - name: Wait for app to be ready
        run: |
          for i in {1..90}; do
            if curl -fsS http://localhost:3000/healthz >/dev/null; then
              echo "App is ready"; exit 0; fi;
            echo "Waiting for app... ($i)"; sleep 2;
          done
          echo "App failed to start in time"; docker compose ps; docker compose logs app || true; exit 1

      - name: Run Playwright tests
        run: npx playwright test

      - name: Docker logs on failure
        if: failure()
        run: |
          docker compose ps
          docker compose logs app mongo || true

      - name: Stop services
        if: always()
        run: docker compose down -v

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
  # GitHub Actions Lint
  actions-lint:
    name: GitHub Actions Lint (actionlint)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run actionlint and output SARIF
        # Pin to a released tag instead of a commit SHA to avoid fetch errors
        uses: rhysd/actionlint@v1.7.1
        continue-on-error: true
        with:
          args: -format sarif -out actionlint-results.sarif

      - name: Ensure SARIF file exists
        if: always()
        shell: bash
        run: |
          if [ ! -f actionlint-results.sarif ]; then
            printf '%s\n' \
              '{' \
              '  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",' \
              '  "version": "2.1.0",' \
              '  "runs": [' \
              '    {' \
              '      "tool": { "driver": { "name": "actionlint", "version": "v1.7.1" } },' \
              '      "results": []' \
              '    }' \
              '  ]' \
              '}' > actionlint-results.sarif
          fi

      - name: Upload actionlint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: actionlint-results.sarif
